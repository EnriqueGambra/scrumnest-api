service: ScrumNestAppSync

frameworkVersion: ">=2.8.0 <3.0.0"

package:
  exclude:
    - ./node_modules/**
    - node_modules/**


custom:
  stage: ${opt:stage, 'dev'}
  output:
    file: output.json

  pythonRequirements:
    dockerizePip: false
    layer: true

  dynamodb-table: 'scrumnest-${self:custom.stage}'

  appSync:
    name: ${self:service}-${self:custom.stage}
    authenticationType: API_KEY #or AMAZON_COGNITO_USER_POOLS (TODO: Switch to Cognito)
    #userPoolConfig:
    #  awsRegion: ${self:provider.region}
    #  defaultAction: ALLOW
    #  userPoolId: { Fn::GetAtt: [CognitoUserPool, Arn] }
    apiKeys:
      - temp-key
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL
    defaultMappingTemplates:
      request: my.request.template.tpl  # TODO: Make this false and to have direct lambda proxy
      response: my.response.template.tpl  # TODO: Make this false and to have direct lambda proxy
    mappingTemplates:
      -
        dataSource: LambdaProxy
        type: Mutation
        field: createNest
      -
        dataSource: LambdaProxy
        type: Mutation
        field: addNestUser
      -
        dataSource: LambdaProxy
        type: Mutation
        field: createStory
      -
        dataSource: LambdaProxy
        type: Query
        field: nest
      -
        dataSource: LambdaProxy
        type: Query
        field: nests
      -
        dataSource: LambdaProxy
        type: Query
        field: story
      -
        dataSource: LambdaProxy
        type: Query
        field: stories
    schema: schema.graphql
    dataSources:
      #- type: AMAZON_DYNAMODB
      #  name: ScrumNestTable
      #  description: Scrum Nest Table
      #  config:
      #    tableName: ${self:custom.dynamodb-table}
      #    serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      #    iamRoleStatements:
      #      - Effect: "Allow"
      #        Action:
      #          - "dynamodb:*"
      #        Resource:
      #          - "arn:aws:dynamodb:::table/scrumnest*"
      - type: AWS_LAMBDA
        name: LambdaProxy
        description: 'Lambda Proxy to DynamoDB'
        config:
          functionName: graphql
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - "*"  # TODO: Change this so that it can only invoke that one lambda but sls is being a PITA


provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, 'us-east-1'}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
        - 'dynamodb:*'
        - 'logs:*'
      Resource: '*'

  environment:
    REGION: ${self:provider.region}
    DYNAMO_DB_TABLE_NAME: ${self:custom.dynamodb-table}


functions:
  graphql:
    handler: functions.handler.main
    layers:
      - { Ref: PythonRequirementsLambdaLayer }


resources:
  - ${file(resources/roles.yml)}
  #- ${file(resources/cognito-user-pool.yml)}
  #- ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/outputs.yml)}

plugins:
   - serverless-stack-output
   - serverless-appsync-plugin
   - serverless-python-requirements
